import type { NextPage } from "next";
import Head from "next/head";
import { toast } from "react-toastify";
import { Box, Grid, Tooltip, Typography } from "@mui/material";
import UsersListContainer from "../src/components/containers/UsersList/usersList.container";
import { useRouter } from "next/router";
import { ReactChild, useEffect, useState } from "react";
import Loader from "../src/components/ui/Loader/loader";
import Wrapper from "../src/components/ui/Wrapper/wrapper";
import { useAuth } from "../src/hooks/useUser";
import MapBoxContainer from "../src/components/containers/Map/mapBox.container";
import useMarkers from "../src/hooks/useMarkers";
import Banner from "../src/components/ui/Banner/banner";
import useCurrentUser from "../src/hooks/useCurrentUser";
import { useTranslation } from "react-i18next";
import { isNotNullable } from "../src/utils/common";
import HelpIcon from "@mui/icons-material/Help";
import { collection, where, query, onSnapshot } from "firebase/firestore";
import { DB } from "../src/firebase";
import { getUsers } from "./api/users";
import { User } from "../src/models/user.model";

const Home: NextPage = () => {
  const [favorites, setFavorites] = useState<string[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  const router = useRouter();
  const { t } = useTranslation();
  const { user, loading } = useAuth();
  const { isLocationAllowed, user: currentUserGeolocation } = useCurrentUser();

  const favoritesUsers = users
    .map((user) => {
      if (favorites?.find((id) => id === user.uid)) {
        return user;
      }
    })
    .filter(isNotNullable);

  const markers = useMarkers(favoritesUsers, currentUserGeolocation);

  useEffect(() => {
    getUsers()
      .then((result) => setUsers(result))
      .catch((error) => toast.error(error));
  }, []);

  useEffect(() => {
    if (user?.uid) {
      const q = query(
        collection(DB, "favorites"),
        where("id", "==", user?.uid)
      );
      onSnapshot(q, (snapshot) => {
        snapshot.forEach((userSnapshot) => {
          setFavorites(userSnapshot.data().users);
        });
      });
    }
  }, [user]);

  useEffect(() => {
    if (!loading && !user) {
      router.push("/login");
    }
  }, [user, loading, router]);

  if (!user || !users.length || !currentUserGeolocation) {
    return <Loader />;
  }

  const handleUserClick = (user: User) => setSelectedUser(user);

  return (
    <Wrapper>
      <Head>
        <title>whereiam</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {!isLocationAllowed ? (
          <Banner
            title={t("dashboard.bannerTitle")}
            buttonText={t("dashboard.bannerButtonText")}
            buttonHref="/user/profile"
          />
        ) : (
          <Grid container>
            <Grid item xs={12} sm={6} lg={3}>
              <Box display="flex" alignItems="center" py={2} mr={2}>
                <Typography variant="h4">
                  {t("dashboard.peopleYouFollow")}
                </Typography>
                <Tooltip
                  title={t("dashboard.tooltip") as ReactChild}
                  placement="top"
                >
                  <Box ml={1}>
                    <HelpIcon sx={{ width: 15, height: 15 }} />
                  </Box>
                </Tooltip>
              </Box>
              <UsersListContainer
                users={[currentUserGeolocation, ...favoritesUsers]}
                onUserClick={handleUserClick}
              />
            </Grid>
            <Grid item xs={12} sm={6} lg={9}>
              <MapBoxContainer markers={markers} selectedUser={selectedUser} />
            </Grid>
          </Grid>
        )}
      </main>
    </Wrapper>
  );
};

export default Home;
